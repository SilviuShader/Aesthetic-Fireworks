#define NUM_LIGHTS 4

Texture2D shaderTexture;
SamplerState sampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float specularPower;
	float4 specularColor;
};

cbuffer LightColorBuffer
{
	float4 pointLightColors[NUM_LIGHTS];
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;

	float3 lightPos1 : TEXCOORD2;
	float3 lightPos2 : TEXCOORD3;
	float3 lightPos3 : TEXCOORD4;
	float3 lightPos4 : TEXCOORD5;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
	float4 specular;

	float lightIntensity1, lightIntensity2, lightIntensity3, lightIntensity4;
	float4 color1, color2, color3, color4;

	textureColor = shaderTexture.Sample(sampleType, input.tex);

	color = ambientColor;

	specular = float4(0.0f, 0.0f, 0.0f ,0.0f);

	lightDir =- lightDirection;

	lightIntensity = saturate(dot(input.normal, lightDir));

	if(lightIntensity > 0.0f)
	{
		color += (diffuseColor * lightIntensity);

		color = saturate(color);

		reflection = normalize(2 * lightIntensity * input.normal - lightDir);

		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
	}

	lightIntensity1 = saturate(dot(input.normal, input.lightPos1));
	lightIntensity2 = saturate(dot(input.normal, input.lightPos2));
	lightIntensity3 = saturate(dot(input.normal, input.lightPos3));
	lightIntensity4 = saturate(dot(input.normal, input.lightPos4));

	color1 = pointLightColors[0] * lightIntensity1;
	color2 = pointLightColors[1] * lightIntensity2;
	color3 = pointLightColors[2] * lightIntensity3;
	color4 = pointLightColors[3] * lightIntensity4;

	color = (color + color1 + color2 + color3 + color4) * textureColor;

	color = saturate(color + specular);

	return color;
}